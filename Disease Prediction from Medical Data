{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMQh/w3935qnc+6gZrLc/vV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report\n","import zipfile\n","\n","# Specify the path to your ZIP file\n","zip_file_path = '/content/archive (4).zip'\n","\n","# Specify the name of the CSV file within the ZIP archive\n","csv_file_name = 'Training.csv'  # or 'Testing.csv', depending on which one you need\n","\n","# Open the ZIP file\n","with zipfile.ZipFile(zip_file_path, 'r') as zip_file:\n","    # Extract the desired CSV file\n","    with zip_file.open(csv_file_name) as csv_file:\n","        # Read the CSV data into a pandas DataFrame\n","        data = pd.read_csv(csv_file)\n","\n","# Check for the actual target column name\n","print(data.columns)\n","\n","# Assuming the dataset has features and a target column named 'prognosis'\n","X = data.drop(columns=['prognosis'], errors='ignore')  # Features\n","y = data['prognosis'] if 'prognosis' in data.columns else None  # Target\n","\n","if y is not None:\n","    # Split the dataset into training and testing sets\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","    # Standardize the feature values\n","    scaler = StandardScaler()\n","    X_train = scaler.fit_transform(X_train)\n","    X_test = scaler.transform(X_test)\n","\n","    # Train a classification model (Random Forest)\n","    model = RandomForestClassifier(n_estimators=100, random_state=42)\n","    model.fit(X_train, y_train)\n","\n","    # Make predictions\n","    y_pred = model.predict(X_test)\n","\n","    # Evaluate the model\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(f'Accuracy: {accuracy:.2f}')\n","    print('Classification Report:\\n', classification_report(y_test, y_pred))\n","# Function to predict disease from new patient data\n","def predict_disease(patient_data, all_columns): # adding all_columns as input to the function\n","    patient_df = pd.DataFrame([patient_data], columns=all_columns[:len(patient_data)]) # Create a dataframe and filling it with patient_data\n","    # Ensuring the dataframe has all the required columns\n","    for col in all_columns:\n","        if col not in patient_df.columns:\n","            patient_df[col] = 0  # or any default value for missing columns\n","\n","    patient_data = patient_df.values # Getting values from the dataframe\n","    patient_data = scaler.transform(patient_data) # Now patient_data has same number of features as scaler was trained on\n","    prediction = model.predict(patient_data)\n","    return prediction[0]\n","\n","# Example usage\n","new_patient = [45, 1, 120, 80, 1]  # Replace with actual feature values\n","all_columns = X.columns # Get all the columns present in the original dataset\n","predicted_disease = predict_disease(new_patient, all_columns) # passing all_columns as input\n","print(f'Predicted Disease: {predicted_disease}')\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2viZEuXp-ysy","executionInfo":{"status":"ok","timestamp":1739562171670,"user_tz":-300,"elapsed":754,"user":{"displayName":"malaika wasi","userId":"11423237388282050455"}},"outputId":"319b0ed1-2228-44f7-86a2-2c0aad017077"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing',\n","       'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity',\n","       'ulcers_on_tongue',\n","       ...\n","       'scurring', 'skin_peeling', 'silver_like_dusting',\n","       'small_dents_in_nails', 'inflammatory_nails', 'blister',\n","       'red_sore_around_nose', 'yellow_crust_ooze', 'prognosis',\n","       'Unnamed: 133'],\n","      dtype='object', length=134)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:1101: RuntimeWarning: invalid value encountered in divide\n","  updated_mean = (last_sum + new_sum) / updated_sample_count\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:1106: RuntimeWarning: invalid value encountered in divide\n","  T = new_sum / new_sample_count\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/extmath.py:1126: RuntimeWarning: invalid value encountered in divide\n","  new_unnormalized_variance -= correction**2 / new_sample_count\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 1.00\n","Classification Report:\n","                                          precision    recall  f1-score   support\n","\n","(vertigo) Paroymsal  Positional Vertigo       1.00      1.00      1.00        18\n","                                   AIDS       1.00      1.00      1.00        30\n","                                   Acne       1.00      1.00      1.00        24\n","                    Alcoholic hepatitis       1.00      1.00      1.00        25\n","                                Allergy       1.00      1.00      1.00        24\n","                              Arthritis       1.00      1.00      1.00        23\n","                       Bronchial Asthma       1.00      1.00      1.00        33\n","                   Cervical spondylosis       1.00      1.00      1.00        23\n","                            Chicken pox       1.00      1.00      1.00        21\n","                    Chronic cholestasis       1.00      1.00      1.00        15\n","                            Common Cold       1.00      1.00      1.00        23\n","                                 Dengue       1.00      1.00      1.00        26\n","                              Diabetes        1.00      1.00      1.00        21\n","           Dimorphic hemmorhoids(piles)       1.00      1.00      1.00        29\n","                          Drug Reaction       1.00      1.00      1.00        24\n","                       Fungal infection       1.00      1.00      1.00        19\n","                                   GERD       1.00      1.00      1.00        28\n","                        Gastroenteritis       1.00      1.00      1.00        25\n","                           Heart attack       1.00      1.00      1.00        23\n","                            Hepatitis B       1.00      1.00      1.00        27\n","                            Hepatitis C       1.00      1.00      1.00        26\n","                            Hepatitis D       1.00      1.00      1.00        23\n","                            Hepatitis E       1.00      1.00      1.00        29\n","                          Hypertension        1.00      1.00      1.00        25\n","                        Hyperthyroidism       1.00      1.00      1.00        24\n","                           Hypoglycemia       1.00      1.00      1.00        26\n","                         Hypothyroidism       1.00      1.00      1.00        21\n","                               Impetigo       1.00      1.00      1.00        24\n","                               Jaundice       1.00      1.00      1.00        19\n","                                Malaria       1.00      1.00      1.00        22\n","                               Migraine       1.00      1.00      1.00        25\n","                        Osteoarthristis       1.00      1.00      1.00        22\n","           Paralysis (brain hemorrhage)       1.00      1.00      1.00        24\n","                    Peptic ulcer diseae       1.00      1.00      1.00        17\n","                              Pneumonia       1.00      1.00      1.00        28\n","                              Psoriasis       1.00      1.00      1.00        22\n","                           Tuberculosis       1.00      1.00      1.00        25\n","                                Typhoid       1.00      1.00      1.00        19\n","                Urinary tract infection       1.00      1.00      1.00        26\n","                         Varicose veins       1.00      1.00      1.00        22\n","                            hepatitis A       1.00      1.00      1.00        34\n","\n","                               accuracy                           1.00       984\n","                              macro avg       1.00      1.00      1.00       984\n","                           weighted avg       1.00      1.00      1.00       984\n","\n","Predicted Disease: Fungal infection\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","<ipython-input-9-63d8a64e497f>:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  patient_df[col] = 0  # or any default value for missing columns\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n","  warnings.warn(\n"]}]}]}