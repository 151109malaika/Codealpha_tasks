{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMbTs211FNRqGhXRRWLDgJX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":786},"id":"onyxqdo54YOF","executionInfo":{"status":"ok","timestamp":1739560859576,"user_tz":-300,"elapsed":410686,"user":{"displayName":"malaika wasi","userId":"11423237388282050455"}},"outputId":"b85085d8-04d8-40f6-b5c4-5451490fa4da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 34ms/step - accuracy: 0.9077 - loss: 0.3024 - val_accuracy: 0.9866 - val_loss: 0.0428\n","Epoch 2/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m58s\u001b[0m 31ms/step - accuracy: 0.9857 - loss: 0.0456 - val_accuracy: 0.9881 - val_loss: 0.0366\n","Epoch 3/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 31ms/step - accuracy: 0.9905 - loss: 0.0290 - val_accuracy: 0.9890 - val_loss: 0.0370\n","Epoch 4/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 30ms/step - accuracy: 0.9937 - loss: 0.0195 - val_accuracy: 0.9903 - val_loss: 0.0312\n","Epoch 5/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 31ms/step - accuracy: 0.9949 - loss: 0.0156 - val_accuracy: 0.9917 - val_loss: 0.0246\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 8ms/step - accuracy: 0.9899 - loss: 0.0292\n","Test accuracy: 0.9917\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 91ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.datasets import mnist\n","\n","# Load MNIST dataset (for digits 0-9)\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","# Normalize pixel values to be between 0 and 1\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","\n","# Reshape for CNN (add channel dimension)\n","x_train = x_train.reshape(-1, 28, 28, 1)\n","x_test = x_test.reshape(-1, 28, 28, 1)\n","\n","# Define CNN model\n","model = keras.Sequential([\n","    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n","    layers.MaxPooling2D((2,2)),\n","    layers.Conv2D(64, (3,3), activation='relu'),\n","    layers.MaxPooling2D((2,2)),\n","    layers.Flatten(),\n","    layers.Dense(128, activation='relu'),\n","    layers.Dense(10, activation='softmax')\n","])\n","\n","# Compile the model\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# Train the model\n","model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))\n","\n","# Evaluate the model\n","loss, acc = model.evaluate(x_test, y_test)\n","print(f\"Test accuracy: {acc:.4f}\")\n","\n","# Function to predict a handwritten digit\n","def predict_image(img):\n","    img = img.reshape(1, 28, 28, 1) / 255.0  # Preprocess image\n","    prediction = model.predict(img)\n","    return np.argmax(prediction)\n","\n","# Test with an example\n","def test_prediction(index=0):\n","    plt.imshow(x_test[index].reshape(28, 28), cmap='gray')\n","    plt.title(f\"Predicted: {predict_image(x_test[index])}\")\n","    plt.show()\n","\n","test_prediction(5)\n"]}]}